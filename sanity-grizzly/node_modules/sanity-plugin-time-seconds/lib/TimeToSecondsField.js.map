{"version":3,"sources":["../src/TimeToSecondsField.tsx"],"names":["validTime","str","TimeToSecondsField","React","forwardRef","props","forwardedRef","type","level","onFocus","onBlur","value","markers","presence","useState","Number","stagedValue","setStagedValue","options","errors","useMemo","filter","isValidationErrorMarker","handleChange","useCallback","val","secondsValue","onChange","PatchEvent","from","name","e","target","validationError","length","item","message","studioTheme","title","description","placeholder"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport {withDocument} from 'part:@sanity/form-builder'\nimport {TextInput, studioTheme, ThemeProvider} from '@sanity/ui'\nimport {isValidationErrorMarker} from '@sanity/types'\nimport FormField from 'part:@sanity/components/formfields/default'\nimport PatchEvent, {set, unset} from 'part:@sanity/form-builder/patch-event'\n\nexport {validateTimeFormat} from './utils'\n\nimport {validateTimeFormat, convertSecondsToString, convertStringMMSSToSeconds} from './utils'\n\nimport {Marker, Path} from '@sanity/types'\n\nexport type Props = {\n  type: {\n    _type?: string\n    title: string\n    description?: string\n    name: string\n    options?: {\n      placeholder?: string\n      [s: string]: any\n    }\n  }\n  level: number\n  options: {[s: string]: any}\n  value: number | undefined\n  readOnly: boolean | null\n  onChange: (ev: any) => void\n  // Note: we should allow implementors of custom inputs to forward the passed onFocus to native element's onFocus handler,\n  // but use Path consistently on internal inputs\n  onFocus: (path?: Path | React.FocusEvent<any>) => void\n  onBlur?: () => void\n  markers: Marker[]\n  presence: any[]\n}\n\nconst validTime = (str: string) => {\n  return validateTimeFormat(str) === true\n}\nconst TimeToSecondsField = React.forwardRef(\n  (props: Props, forwardedRef: React.ForwardedRef<HTMLInputElement>) => {\n    const {type, level, onFocus, onBlur, value, markers, presence} = props\n    const [stagedValue, setStagedValue] = React.useState(\n      convertSecondsToString(Number(value), true)\n    )\n\n    const options: {placeholder?: string} = type.options || {}\n    const errors = React.useMemo(() => markers.filter(isValidationErrorMarker), [markers])\n    const handleChange = React.useCallback(\n      (val) => {\n        setStagedValue(val)\n        if (validTime(val)) {\n          const secondsValue = convertStringMMSSToSeconds(val)\n          props.onChange(PatchEvent.from(secondsValue ? set(secondsValue) : unset()))\n        }\n      },\n      [props.onChange, type.name, setStagedValue]\n    )\n    const onChange = React.useCallback((e) => handleChange(e.target.value), [handleChange])\n    const validationError =\n      errors.length > 0\n        ? errors[0].item.message\n        : validTime(stagedValue)\n        ? false\n        : validateTimeFormat(stagedValue)\n\n    return (\n      <ThemeProvider theme={studioTheme}>\n        <FormField\n          label={type.title}\n          __unstable_markers={markers}\n          __unstable_presence={presence}\n          level={level}\n          description={type.description}\n        >\n          <TextInput\n            onBlur={onBlur}\n            type={'text'}\n            placeholder={options.placeholder || 'Enter a time in 00:00 format'}\n            onFocus={onFocus}\n            customValidity={validationError}\n            ref={forwardedRef}\n            maxLength={5}\n            onChange={onChange}\n            value={stagedValue}\n          />\n        </FormField>\n      </ThemeProvider>\n    )\n  }\n)\n\nexport default withDocument(TimeToSecondsField)\n"],"file":"TimeToSecondsField.js"}