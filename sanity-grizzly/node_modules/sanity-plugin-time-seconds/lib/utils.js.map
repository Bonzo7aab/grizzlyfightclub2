{"version":3,"sources":["../src/utils.ts"],"names":["TIME_REGEX","validateTimeFormat","str","match","convertStringMMSSToSeconds","ts","parted","split","min","Number","sec","isNaN","Error","enforceTwoDigits","value","stringValue","convertSecondsToString","time","defaultToEmpty","secondString","hourString","Math","floor"],"mappings":";;;;;;AAAA,IAAMA,UAAU,GAAG,yBAAnB;;AAEO,IAAMC,kBAAkB,GAAIC,GAAD,IAA0B;AAC1D,MAAI,CAACA,GAAD,IAAQ,OAAOA,GAAP,KAAe,QAA3B,EAAqC;AACnC;AACA,WAAO,IAAP;AACD;;AACD,SAAOA,GAAG,CAACC,KAAJ,CAAUH,UAAV,MAA0B,IAA1B,GAAiC,8BAAjC,GAAkE,IAAzE;AACD,CANM;;;;AAQA,IAAMI,0BAA0B,GAAIC,EAAD,IAAgB;AAAA;;AACxD,MAAMC,MAAM,GAAG,CAACD,EAAD,aAACA,EAAD,cAACA,EAAD,GAAO,EAAP,EAAWE,KAAX,CAAiB,GAAjB,CAAf;AAEA,MAAMC,GAAG,GAAGC,MAAM,aAACH,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAG,CAAH,CAAP,+CAAgB,CAAhB,CAAlB;AACA,MAAMI,GAAG,GAAGD,MAAM,cAACH,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAG,CAAH,CAAP,iDAAgB,CAAhB,CAAlB;;AACA,MAAIK,KAAK,CAACH,GAAD,CAAL,IAAcG,KAAK,CAACD,GAAD,CAAvB,EAA8B;AAC5B,UAAM,IAAIE,KAAJ,CAAU,uBAAV,CAAN;AACD;;AACD,SAAOJ,GAAG,GAAG,EAAN,GAAWE,GAAlB;AACD,CATM;;;;AAUP,IAAMG,gBAAgB,GAAIC,KAAD,IAA2B;AAClD,MAAIC,WAAW,aAAMD,KAAN,CAAf;;AACA,MAAIA,KAAK,GAAG,EAAZ,EAAgB;AACdC,IAAAA,WAAW,cAAOA,WAAP,CAAX;AACD;;AACD,SAAOA,WAAP;AACD,CAND;;AAOO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,IAAD,EAAuD;AAAA,MAA3BC,cAA2B,uEAAV,KAAU;AAC3F,MAAMC,YAAY,GAAGN,gBAAgB,CAACI,IAAI,GAAG,EAAR,CAArC;AACA,MAAMG,UAAU,GAAGP,gBAAgB,CAACQ,IAAI,CAACC,KAAL,CAAWL,IAAI,GAAG,EAAlB,CAAD,CAAnC;;AACA,MAAIN,KAAK,CAACM,IAAD,CAAL,IAAeC,cAAnB,EAAmC;AACjC,WAAO,EAAP;AACD;;AACD,mBAAUE,UAAV,cAAwBD,YAAxB;AACD,CAPM","sourcesContent":["const TIME_REGEX = /^[0-9][0-9]:[0-5][0-9]$/\n\nexport const validateTimeFormat = (str: string | number) => {\n  if (!str || typeof str === 'number') {\n    //Empty field is valid, as we're not testing it's required.\n    return true\n  }\n  return str.match(TIME_REGEX) === null ? 'Enter a time in format MM:SS' : true\n}\n\nexport const convertStringMMSSToSeconds = (ts: string) => {\n  const parted = (ts ?? '').split(':')\n\n  const min = Number(parted?.[0] ?? 0)\n  const sec = Number(parted?.[1] ?? 0)\n  if (isNaN(min) || isNaN(sec)) {\n    throw new Error('Please enter in 00:00')\n  }\n  return min * 60 + sec\n}\nconst enforceTwoDigits = (value: number): string => {\n  let stringValue = `${value}`\n  if (value < 10) {\n    stringValue = `0${stringValue}`\n  }\n  return stringValue\n}\nexport const convertSecondsToString = (time: number | typeof NaN, defaultToEmpty = false) => {\n  const secondString = enforceTwoDigits(time % 60)\n  const hourString = enforceTwoDigits(Math.floor(time / 60))\n  if (isNaN(time) && defaultToEmpty) {\n    return ''\n  }\n  return `${hourString}:${secondString}`\n}\n"],"file":"utils.js"}