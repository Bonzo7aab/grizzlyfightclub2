"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertSecondsToString = exports.convertStringMMSSToSeconds = exports.validateTimeFormat = void 0;
var TIME_REGEX = /^[0-9][0-9]:[0-5][0-9]$/;

var validateTimeFormat = str => {
  if (!str || typeof str === 'number') {
    //Empty field is valid, as we're not testing it's required.
    return true;
  }

  return str.match(TIME_REGEX) === null ? 'Enter a time in format MM:SS' : true;
};

exports.validateTimeFormat = validateTimeFormat;

var convertStringMMSSToSeconds = ts => {
  var _parted$, _parted$2;

  var parted = (ts !== null && ts !== void 0 ? ts : '').split(':');
  var min = Number((_parted$ = parted === null || parted === void 0 ? void 0 : parted[0]) !== null && _parted$ !== void 0 ? _parted$ : 0);
  var sec = Number((_parted$2 = parted === null || parted === void 0 ? void 0 : parted[1]) !== null && _parted$2 !== void 0 ? _parted$2 : 0);

  if (isNaN(min) || isNaN(sec)) {
    throw new Error('Please enter in 00:00');
  }

  return min * 60 + sec;
};

exports.convertStringMMSSToSeconds = convertStringMMSSToSeconds;

var enforceTwoDigits = value => {
  var stringValue = "".concat(value);

  if (value < 10) {
    stringValue = "0".concat(stringValue);
  }

  return stringValue;
};

var convertSecondsToString = function convertSecondsToString(time) {
  var defaultToEmpty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var secondString = enforceTwoDigits(time % 60);
  var hourString = enforceTwoDigits(Math.floor(time / 60));

  if (isNaN(time) && defaultToEmpty) {
    return '';
  }

  return "".concat(hourString, ":").concat(secondString);
};

exports.convertSecondsToString = convertSecondsToString;
//# sourceMappingURL=utils.js.map