"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "validateTimeFormat", {
  enumerable: true,
  get: function get() {
    return _utils.validateTimeFormat;
  }
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _formBuilder = require("part:@sanity/form-builder");

var _ui = require("@sanity/ui");

var _types = require("@sanity/types");

var _default2 = _interopRequireDefault(require("part:@sanity/components/formfields/default"));

var _patchEvent = _interopRequireWildcard(require("part:@sanity/form-builder/patch-event"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var validTime = str => {
  return (0, _utils.validateTimeFormat)(str) === true;
};

var TimeToSecondsField = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
  var type = props.type,
      level = props.level,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      value = props.value,
      markers = props.markers,
      presence = props.presence;

  var _React$useState = React.useState((0, _utils.convertSecondsToString)(Number(value), true)),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      stagedValue = _React$useState2[0],
      setStagedValue = _React$useState2[1];

  var options = type.options || {};
  var errors = React.useMemo(() => markers.filter(_types.isValidationErrorMarker), [markers]);
  var handleChange = React.useCallback(val => {
    setStagedValue(val);

    if (validTime(val)) {
      var secondsValue = (0, _utils.convertStringMMSSToSeconds)(val);
      props.onChange(_patchEvent.default.from(secondsValue ? (0, _patchEvent.set)(secondsValue) : (0, _patchEvent.unset)()));
    }
  }, [props.onChange, type.name, setStagedValue]);
  var onChange = React.useCallback(e => handleChange(e.target.value), [handleChange]);
  var validationError = errors.length > 0 ? errors[0].item.message : validTime(stagedValue) ? false : (0, _utils.validateTimeFormat)(stagedValue);
  return /*#__PURE__*/React.createElement(_ui.ThemeProvider, {
    theme: _ui.studioTheme
  }, /*#__PURE__*/React.createElement(_default2.default, {
    label: type.title,
    __unstable_markers: markers,
    __unstable_presence: presence,
    level: level,
    description: type.description
  }, /*#__PURE__*/React.createElement(_ui.TextInput, {
    onBlur: onBlur,
    type: 'text',
    placeholder: options.placeholder || 'Enter a time in 00:00 format',
    onFocus: onFocus,
    customValidity: validationError,
    ref: forwardedRef,
    maxLength: 5,
    onChange: onChange,
    value: stagedValue
  })));
});

var _default = (0, _formBuilder.withDocument)(TimeToSecondsField);

exports.default = _default;
//# sourceMappingURL=TimeToSecondsField.js.map